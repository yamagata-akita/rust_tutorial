所有権システムの利点

・ガベージコレクタが不要になる
  プログラムのランタイムが軽量化されるだけなく、
  応答時間やメモリ使用量が予測しやすくなる

・メモリ安全性がコンパイル時に保証される

・メモリだけでなく、ファイルやロックなどのリソースが使い終わった時点で自動開放できる


ガベージコレクション(GC)
  プログラムが動的に確保したメモリ領域で不要になった部分を自動的に見つけ出して開放する
  言語のランタイムに用意されたガベージコレクタと呼ばれる機能によって実現される


メモリ安全性
  Rustでは以下を保証する
  ・メモリの2重開放による未定義動作を起こさない
    未定義動作: Rustの言語仕様で定義されていない振る舞い

  ・不正なポインタ(ダングリングポインタ)を作らない
    ダングリングポインタ: 開放済みの領域など無効なメモリをさすポインタ


所有権システムの役割

  1.リソースの自動開放。値が不要になったら、それが使用していたリソースを速やかに、
    ただ一度だけ開放する

    ・開放漏れによるリソースリークの防止
    ・二重開放による未定義動作の防止

  2.ダングリングポインタの防止


ここでのリソース(資源)は以下のようなものを指す
・メモリ
・ファイルディスクリプタ(開いているファイルへのハンドル)
・ソケットなどのネットワークリソース
・マルチスレッドプログラミングにおける排他制御用のロック

所有権システムでは、上記の役割を所有権、ムーブセマンティクス、ライフタイムの追跡と借用規則
によって実現する。いずれもコンパイル時に分析が行われる


所有権(ownership)
  ・所有権はある値を所有できる権利のこと
    所有権を持つ者をその値の所有者(owner)と呼ぶ
  ・変数が値の所有者になれるのはもちろん、値自身も他の値の所有者になれる
  ・値には所有権が1つだけある。
  ・所有者は値を指す不変、可変の参照を作ることで、他者に値を貸し出せる
  ・所有者は所有権を他者に譲渡(移動)できる。これにより、元の所有者は所有権を失う
  ・所有者がスコープを抜けるときに値のライフタイムが尽きる。
    そのタイミングで値が破棄され、使用していたリソースが開放される。


ムーブセマンティクスとコピーセマンティクス(move/copy semantics)
  ・ある変数から別の変数へ値を代入するとき、値の型によってプログラムの意味(セマンティクス)
    が変わる
  ・ムーブセマンティクスでは代入元の変数から代入先の変数へ所有権が移動(ムーブ)する
    代入元の変数は値の所有権を失い、代入先の変数が所有権を得る。
  ・コピーセマンティクスでは値が複製(コピー)されたとみなし、所有権は移動しない。
    代入元の変数は元の値をそのまま所有し、代入先の変数は複製された値を所有する


借用(borrow)
  ・値を指す参照を作ると、所有権の観点からは値を借用していることになる
  ・借用には、不変の借用と可変の借用がある
  参照と借用の実体は同じもので、見方によって呼び名が変わる


ライフタイム(lifetime)
  ・ライフタイムは生存期間の意味
  ・値のライフタイムと参照のライフタイムの2種類がある
  ・値のライフタイムは、値が構築されてから破棄されるまでの期間を指す
  ・値参照のライフライムは、値への参照が使用される期間を指す

  値のライフタイムを「値のスコープ」と呼ぶことにする。


借用規則
  コンパイラは以下の規則が守られているか検査することで、メモリ安全性を保証する

  1.不変、可変を問わず参照のライフタイムが値のスコープよりも短いこと
  2.値が共有されている間(不変の参照が有効な間)は値の変更を許さない。
    ある値Tについて以下のいずれかの状態のみを許す
    ・任意個の不変の参照&Tを持つ
    ・ただ一つの可変の参照&mut Tを持つ

値の参照を得ることを借用と呼ぶ
借用では値の所有権は持たず、所有者から値を一時的に借りている



共同所有者を実現するポインタ
Rc<T>ポインタとArc<T>ポインタ

Rcポインタ(Rc: Reference Counted = 参照カウントされた)
動作
1.Rc::new(対象のリソース)で新しいRcポインタを作る。
  対象のリソースは参照カウンタとともにヒープ領域に格納される
2.新しい所有者(共同所有者)を追加するときは、Rc::cloneでRcポインタを複製する。
  参照カウントが1増える
3.Rcポインタがスコープを抜けると、Rcポインタのデストラクタ(Drop::drop)が呼ばれ、
  参照カウントが1減る
4.参照カウントが0になったとき、リソースが開放される



内側のミュータビリティ(interior mutability)
コンパイル時の借用チェックを迂回してデータを可変にするしくみ