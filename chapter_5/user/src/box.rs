fn main() {
    // Box(std::boxed::Box<T>)
    // Box<T>はメモリ安全なポインタで、以下の特徴を持つ
    // 対象のデータをヒープ領域に置く
    // ポインタでありながら、対象のデータを保有する

    // Boxポインタの作成
    let t1 = (3, "birds".to_string());  // (i32, String)型のタプル。スタックに置かれる
    let mut b1 = Box::new(t1);          // Boxポインタを作る。タプルがヒープに移動する
    (*b1).0 += 1;                       // *で参照外し
    assert_eq!(*b1, (4, "birds".to_string()));

    // Box:::new()の実行後にt1にアクセスしようとするとコンパイルエラーになる
    // t1の中身はヒープに移動されたから
    // println!("{:?}", &t1);

    // Boxポインタが使われる場面
    // コンパイル時にデータサイズが決まらない型を扱うとき。
    // 再帰的なデータ構造を実現するにはBoxやRcのような値を所有するポインタが必要になる
    // 大きなデータをコピーすることなく、その所有権を他者へ移動したいとき
    // トレイトオブジェクトを作成したいとき
}